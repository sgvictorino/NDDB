{"name":"Nddb","tagline":"Javascript lightweight N-dimensional database","body":"# NDDB\r\n\r\n[![Build Status](https://travis-ci.org/nodeGame/NDDB.png?branch=master)](https://travis-ci.org/nodeGame/NDDB)\r\n\r\nNDDB is a powerful and versatile object database for node.js and the browser.\r\n\r\n---\r\n\r\nNDDB (N-Dimensional DataBase) supports indexes, views, hashes, joins,\r\ngroup-by, basic statistics, custom operations, saving and loading from\r\nfile system and browser localStorage, and much more.\r\n\r\nDeveloper-friendly thanks to an easy api, detailed documentation, and\r\n**100%** test coverage.\r\n\r\n## List of features\r\n\r\n- Selecting: `select`, `and`, `or`\r\n- Sorting: `sort`, `reverse`, `last`, `first`, `limit`, `distinct`,\r\n  `shuffle`\r\n- Indexing: `view`, `index`, `hash`, `comparator`\r\n- Custom callbacks: `map`, `each`, `filter`\r\n- Updating and Deletion: `update`, `remove`, `clear`\r\n- Advanced operations: `split`, `join`, `concat`, `groupBy`\r\n- Fetching and transformations: `fetch`, `fetchArray`,\r\n  `fetchKeyArray`, `fetchValues`, `fetchSubObj`\r\n- Statistics operator: `count`, `max`, `min`, `mean`, `stddev`\r\n- Diff: `diff`, `intersect`\r\n- Skim: `skim`, `keep`\r\n- Iterator: `previous`, `next`, `first`, `last`\r\n- Tagging: `tag`\r\n- Event listener / emitter: `on`, `off`, `emit`\r\n- Saving and Loading: `save`, `load`, `loadCSV`\r\n\r\nThe complete NDDB api documentation is available\r\n[here](http://nodegame.github.com/NDDB/docs/nddb.js.html).\r\n\r\n## Usage\r\n\r\nLoad the library in Node.js:\r\n\r\n```javascript\r\nvar NDDB = require('NDDB').NDDB;\r\n```\r\n\r\nor in the browser add a script tag in the page:\r\n\r\n```html\r\n<!-- Must load a version of NDDB that includes JSUS (see 'build/' dir) -->\r\n<script src=\"/path/to/nddb.js\"></script>\r\n```\r\n\r\nCreate an instance of NDDB:\r\n\r\n```javascript   \r\nvar db = new NDDB();\r\n```\r\n\r\nInsert an item into the database:\r\n\r\n```javascript\r\ndb.insert({\r\n    painter: \"Picasso\",\r\n    title: \"Les Demoiselles d'Avignon\",\r\n    year: 1907\r\n});\r\n```\r\n\r\nImport a collection of items:\r\n\r\n```javascript\r\nvar items = [\r\n    {\r\n        painter: \"Dali\",\r\n        title: \"Portrait of Paul Eluard\",\r\n        year: 1929,\r\n        portrait: true\r\n    },\r\n    {\r\n        painter: \"Dali\",\r\n        title: \"Barcelonese Mannequin\",\r\n        year: 1927\r\n    },\r\n    {\r\n        painter: \"Monet\",\r\n        title: \"Water Lilies\",\r\n        year: 1906\r\n    },\r\n    {\r\n        painter: \"Monet\",\r\n        title: \"Wheatstacks (End of Summer)\",\r\n        year: 1891\r\n    },\r\n    {\r\n        painter: \"Manet\",\r\n        title: \"Olympia\",\r\n        year: 1863\r\n    }\r\n];\r\n\r\ndb.importDB(items);\r\n```\r\n\r\nRetrieve the database size:\r\n\r\n```javascript\r\nvar db_size = db.size(); // 6\r\n```\r\n\r\n### Select Items\r\n\r\nSelect statements must begin with `select`, and can be concatened by\r\nany number of subsequent `and` and `or` statements. The comparison in\r\nselect statements is performed using three input parameters: \r\n\r\n  - 'property'\r\n  - 'operator'\r\n  - any additional number of arguments required by operator\r\n\r\nAvailable operators include standard logical operators:\r\n\r\n   - `=`, `==`, `!=`, ``>`, >=`, `<`, `<=`,\r\n\r\nor advanced comparison operators:\r\n\r\n   - `E`: field exists (can be omitted, it is the default one)\r\n   - `><`: between values (expects array)\r\n   - `<>`: not between values (expects array)\r\n   - `in`: element is found in array (expects array)\r\n   - `!in`: element is noi found in array (expects array)\r\n   - `LIKE`: string SQL LIKE (case sensitive)\r\n   - `iLIKE`: string SQL LIKE (case insensitive)\r\n\r\nIt is possible to access and compare nested properties simply\r\nseparating them with `.`.\r\n\r\nAfter a selection is finished, items can be returned using one of the\r\n`fetch` statements.\r\n\r\n#### Select Examples\r\n\r\nSelect all paintings from Dali:\r\n\r\n```javascript\r\ndb.select('painter', '=', 'Dali'); // 2 items\r\n```\r\n\r\nCase sensitive `LIKE` operator:\r\n\r\n```javascript\r\ndb.select('painter', 'LIKE', 'M_net'); // 3 items\r\n```\r\n\r\nSelect on multiple properties (`*`) with case insensitive `LIKE`:\r\n\r\n```javascript\r\ndb.select('*', 'iLIKE', '%e%'); // All items\r\ndb.select(['painter', 'portrait'], 'iLIKE', '%e%') // 5 items\r\n```\r\n\r\nSelect all portraits:\r\n\r\n```javascript\r\ndb.select('portrait'); // 1 item\r\n```\r\n\r\nFetch all paintings from Dali that are before 1928:\r\n\r\n```javascript\r\ndb.select('painter', '=', 'Dali')\r\n  .and('year', '<', 1928);\r\n  .fetch(); // 1 item\r\n```\r\n\r\nFetch all paintings of the beginning of XX's century:\r\n\r\n```javascript\r\n    db.select('year', '><', [1900, 1910])\r\n      .fetch(); // 2 items\r\n```\r\n\r\nFetch separately all the painters and all the dates of the paintings:\r\n\r\n```javascript\r\ndb.select('year', '><', [1900, 1910])\r\n  .fetchValues(['painter', 'title']);\r\n\r\n// { painter: [ 'Jesus', 'Dali', 'Dali', 'Monet', 'Monet', 'Manet' ],\r\n//   year: [ 0, 1929, 1927, 1906, 1891, 1863 ] }\r\n```\r\n\r\n### Sorting\r\n\r\nDefine a global comparator function that sorts all the entries chronologically:\r\n\r\n```javascript\r\ndb.globalCompator = function (o1, o2) {\r\n    if (o1.year < o2.year) return 1;\r\n    if (o1.year < o2.year) return 2;\r\n    return 0;\r\n};\r\n```\r\n\r\nSort all the items (global comparator function is automatically used):\r\n\r\n```javascript\r\ndb.sort(); // Order: Manet, Monet, Monet, Picasso, Dali, Dali\r\n```\r\n\r\nReverse the order of the items:\r\n\r\n```javascript\r\ndb.reverse(); // Order: Dali, Dali, Picasso, Monet, Monet, Manet\r\n```\r\n\r\nDefine a custom comparator function for the name of the painter, which\r\ngives highest priorities to the canvases of Picasso;\r\n\r\n```javascript\r\ndb.compare('painter', function (o1, o2) {\r\n    if (o1.painter === 'Picasso') return -1;\r\n    if (o2.painter === 'Picasso') return 1;\r\n}\r\n```\r\n\r\nSort all the paintings by painter\r\n\r\n```javascript\r\ndb.sort('painter'); // Picasso is always listed first\r\n```\r\n\r\n### Views\r\n\r\nSplits the database in sub-database, each containing semantically\r\nconsistent set of entries:\r\n\r\n```javascript\r\n// Let us add some cars to our previous database of paintings.\r\nvar not_art_items = [\r\n    {\r\n      car: \"Ferrari\",\r\n      model: \"F10\",\r\n      speed: 350,\r\n    },\r\n    {\r\n      car: \"Fiat\",\r\n      model: \"500\",\r\n      speed: 100,\r\n    },\r\n    {\r\n      car: \"BMW\",\r\n      model: \"Z4\",\r\n      speed: 250,\r\n    },\r\n];\r\n\r\ndb.view('art', function(o) {\r\n  return o.painter;\r\n});\r\n\r\ndb.view('cars', function(o) {\r\n  return o.car;\r\n});\r\n\r\ndb.rebuildIndexes();\r\n\r\ndb.size();          // 9\r\ndb.art.size();      // NDDB with 6 art entries\r\ndb.cars.size();     // NDDB with 3 car entries\r\n```\r\n\r\n### Hashing\r\n\r\nDefine a custom hash function that creates a new view on each of the\r\npainters in the database:\r\n\r\n```javascript\r\ndb.hash('painter', function(o) {\r\n    if (!o) return undefined;\r\n    return o.painter;\r\n});\r\n\r\ndb.rebuildIndexes();\r\n\r\ndb.size();          // 6, unchanged;\r\ndb.painter.Picasso; // NDDB with 1 element in db\r\ndb.painter.Monet    // NDDB with 2 elements in db\r\ndb.painter.Manet    // NDDB with 1 elements in db\r\ndb.painter.Dali     // NDDB with 2 elements in db\r\n```\r\n\r\n### Listenting to events\r\n\r\nListen to the `insert` event and modify the inserted items by adding\r\nan external index to them:\r\n\r\n```javascript\r\nvar id = 0;\r\nfunction getMyId(){ return id++; };\r\n\r\ndb.on('insert', function(o) {\r\n    o.painter.id = getMyId();\r\n});\r\n```\r\n\r\n### Indexes\r\n\r\nDefine a custom indexing function that gives fast, direct access to\r\nthe items of the database;\r\n\r\n```javascript\r\ndb.index('pid', function(o) {\r\n    return o.id;\r\n});\r\n\r\ndb.rebuildIndexes();\r\n\r\ndb.pid.get(0).name; // Picasso\r\n\r\ndb.pid.update(0, {\r\n  comment: \"Good job Pablo!\"\r\n});\r\n\r\n// Counts items in selection.\r\ndb.select('comment').count(); // 1\r\n\r\nvar picasso = db.pid.remove(0);\r\ndb.size(); // (0)\r\n\r\n// Get all available keys in the index\r\ndb.painter.getAllKeys(); // ['0','1', ... ]\r\n\r\n// Get all elements indexed by their key in one object\r\ndb.painter.getAllKeyElements();\r\n```\r\n\r\n## Example of a configuration object\r\n\r\n```javascript\r\nvar logFunc = function(txt, level) {\r\n  if (level > 0) {\r\n    console.log(txt);\r\n  }\r\n};\r\n\r\nvar options = {\r\n  tags:  {},          // Collection of tags\r\n  update: {           // On every insert, remove and update:\r\n    indexes:  true,   // Updates the indexes, if any\r\n    sort:     true,   // Sorts the items of the database\r\n    pointer:  true,   // Moves the iterator to the last inserted element\r\n  },\r\n  C:  {},             // Collection of comparator functions\r\n  H:  {},             // Collection of hashing functions\r\n  I:  {},             // Collection of indexing functions\r\n  V:  {},             // Collection of view functions\r\n  log: logFunc,       // Default stdout\r\n  logCtx: logCtx      // The context of execution for the log function\r\n  nddb_pointer: 4,    // Set the pointer to element of index 4\r\n  globalCompare: function(o1, o2) {\r\n    // comparing code\r\n  },\r\n  filters: {          // Extends NDDB with new operators for select queries\r\n    '%': function(d, value, comparator){\r\n          return function(elem) {\r\n            if ((elem[d] % value) === 0) {\r\n              return elem;\r\n            }\r\n          }\r\n  },\r\n  share: {           // Contains objects that are copied by reference to\r\n                     // in every new instance of NDDB.\r\n    sharedObj: sharedObj\r\n  }\r\n}\r\n\r\nvar nddb = new NDDB(options);\r\n\r\n// or\r\n\r\nnddb = new NDDB();\r\nnddb.init(options);\r\n```\r\n\r\n## Save and load from file or to localStorage\r\n\r\nIn the node.js environment, it is possible to save the state of the\r\ndatabase to a file and load it afterwards.\r\n\r\n```javascript\r\n// Database exists and items inserted.\r\ndb.save('./db.out');\r\n\r\nvar db2 = new NDDB();\r\ndb2.load('./db.out');\r\n```\r\n\r\nThe above command are valid also in the browser environment if\r\n[Shelf.js](https://github.com/shakty/shelf.js) is loaded. A string id\r\ninstead of the path to a file must be given instead.\r\n\r\n## Test\r\n\r\nNDDB relies on [mocha](http://visionmedia.github.com/mocha/) and\r\n[should.js](http://github.com/visionmedia/should.js) for testing.\r\n\r\n    $ npm install # will load all necessary dependencies\r\n    $ npm test # will run the test suite against nddb.js\r\n\r\n## Build\r\n\r\nCreate your customized build of NDDB using the make file in the `bin`\r\ndirectory:\r\n\r\n\r\nIn order to run in the browser NDDB needs to have\r\n[JSUS](http://github.com/nodeGame/JSUS) loaded. You can include it\r\nseparately, or create a new build that includes it already. See the\r\nbuild help for options.\r\n\r\n```javascript\r\nnode make.nddb.js build // Standard build,\r\nnode make.nddb.js build -a -o nddb-full // Full build\r\n```\r\n\r\nThe build file file will be created inside the `build/` directory.\r\n\r\n\r\n### Help\r\n\r\n```javascript\r\nnode make.nddb.js --help\r\n```\r\n\r\n## API Documentation\r\n\r\nCreate html API documentation using the make file in the bin directory:\r\n\r\n```javascript\r\nnode make.nddb.js doc\r\n```\r\n\r\n## License\r\n\r\nCopyright (C) 2014 Stefano Balietti\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-34089835-1","note":"Don't delete this file! It's used internally to help with page regeneration."}